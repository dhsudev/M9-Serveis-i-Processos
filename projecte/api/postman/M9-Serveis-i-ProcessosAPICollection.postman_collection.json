{
	"info": {
		"_postman_id": "b005e355-5b66-4324-85da-3959b8f09d79",
		"name": "M9-Serveis-i-Processos API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41814672"
	},
	"item": [
		{
			"name": "Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status endpoint returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has Running Status', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Status).to.eql('Running');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverUrl}}/status",
					"host": [
						"{{serverUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Users GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const data = pm.response.json();",
							"",
							"pm.test('User POST returns 201 or 200', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"// Save the new user's ID into an environment variable if available",
							"if(data && data.user && Object.keys(data.user).length > 0) {",
							"    const userId = Object.keys(data.user)[0];",
							"    pm.collectionVariables.set('userId', userId);",
							"} else if(data && Object.keys(data).length > 0) {",
							"    const userId = Object.keys(data)[0];",
							"    pm.collectionVariables.set('userId', userId);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"testuser@example.com\",\n    \"password\": \"holahola332\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Get One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Users GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User PUT returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Test User\",\n    \"email\": \"updateduser@example.com\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resources - Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Resources GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/resources",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resources"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resources - Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const data = pm.response.json();",
							"",
							"pm.test('Resources POST returns 201 or 200', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"// Save the new resource's ID into an environment variable if available",
							"if(data && data.resource && Object.keys(data.resource).length > 0) {",
							"    const resourceId = Object.keys(data.resource)[0];",
							"    pm.collectionVariables.set('resourceId', resourceId);",
							"} else if(data && Object.keys(data).length > 0) {",
							"    const resourceId = Object.keys(data)[0];",
							"    pm.collectionVariables.set('resourceId', resourceId);",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Resource Name\",\n    \"status\": \"available\",\n    \"properties\": []\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/resources",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resources"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resources - Get One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Resources GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/resources/{{resourceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resources",
						"{{resourceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resources - Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Resources PUT returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Resource Name\",\n    \"status\": \"unavailable\",\n    \"properties\": [\"prop1\", \"prop2\"]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/resources/{{resourceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resources",
						"{{resourceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Books - Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Books GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Books - Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Books POST returns 201 or 200', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"",
							"",
							"// Save the new book's ID into an environment variable if available",
							"if (pm.response.code === 201) {",
							"    const responseBody = pm.response.json();",
							"    const bookId = Object.keys(responseBody.book)[0];",
							"    pm.environment.set('bookId', bookId);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"day\": \"2025-02-06T08:30:31.997Z\",\n  \"userId\": \"{{userId}}\",\n  \"resourceId\": \"{{resourceId}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Books - Get All Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Books GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifications - Get All",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Notifications GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifications - Add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the notification POST request is successful (returns 201 or 200)",
							"pm.test('Resources POST returns 201 or 200', function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							"// Check if the notification message is added successfully",
							"pm.test('Notification message is added successfully', function () {",
							"    pm.expect(pm.response.json().message).to.eql('notification added successfully');",
							"});",
							"// Save the new resource's ID into an environment variable if available",
							"if (pm.response.code === 201) {",
							"    const responseBody = pm.response.json();",
							"    const notificationId = Object.keys(responseBody.notification)[0];",
							"    pm.environment.set('notificationId', notificationId);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"message\": \"Your reservations is tomorrow.\",\n    \"sendDate\" : \"2025-02-06T08:30:31.997Z\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/notifications",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifications - Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Notifications GET returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": \"Your message has been updated.\",\n    \"sendDate\" : \"2025-02-06T08:30:31.997Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notifications/{{notificationId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications",
						"{{notificationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User DELETE returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Clear the userId variable",
							"pm.environment.unset('userId');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Notifiaction - Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User DELETE returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Clear the userId variable",
							"pm.environment.unset('userId');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notifications/{{notificationId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notifications",
						"{{notificationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resource - Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('User DELETE returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Clear the userId variable",
							"pm.environment.unset('userId');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/resources/{{resourceId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"resources",
						"{{resourceId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Resources - Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Resources DELETE returns 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Clear the resourceId variable",
							"pm.environment.unset('resourceId');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books/{{bookId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						"{{bookId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3010/api"
		},
		{
			"key": "serverUrl",
			"value": "http://localhost:3010"
		},
		{
			"key": "userId",
			"value": "0"
		},
		{
			"key": "resourceId",
			"value": "0"
		},
		{
			"key": "notificationId",
			"value": "0",
			"type": "string"
		},
		{
			"key": "bookId",
			"value": "0",
			"type": "string"
		}
	]
}